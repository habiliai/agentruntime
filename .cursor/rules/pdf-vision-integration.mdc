---
description: 'PDF processing and vision embedding integration patterns'
globs: 'knowledge/pdf_loader*.go,knowledge/*vision*.go'
---

# PDF Vision Integration Patterns

## PDF Processing Configuration

**MUST** support both text and vision embedding methods:

```go
type KnowledgeConfig struct {
    PDFEmbeddingMethod   string // "text" or "vision"
    PDFExtractionMethod  string // "library" or "llm"
}
```

## Image Processing Pipeline

### Page Rendering

- **DPI**: Use 120 DPI for balance between quality and size
- **Max Dimensions**: 1280x1280 pixels maximum
- **Format**: JPEG with quality 85 for optimal size/quality ratio
- **Scaling**: Use nearest-neighbor resizing when downsizing needed

### Image Storage

```go
document := &Document{
    Content: Content{
        Image:    base64Image,  // Base64-encoded JPEG
        MIMEType: "image/jpeg",
    },
    EmbeddingText: extractedText,
    // ... other fields
}
```

## Vision Embedding Integration

### Function Signature

```go
func (e *Embedder) EmbedImageFiles(ctx context.Context, mimeType string, imageFiles ...[]byte) ([][]float32, error)
```

### Usage Pattern

```go
case "vision":
    images := make([][]byte, len(knowledge.Documents))
    for i, doc := range knowledge.Documents {
        img, err := base64.StdEncoding.DecodeString(doc.Content.Image)
        if err != nil {
            return nil, errors.Wrapf(err, "failed to decode image")
        }
        images[i] = img
    }
    embeddings, err := embedder.EmbedImageFiles(ctx, "image/jpeg", images...)
    // Handle embeddings...
```

## Test Integration Patterns

### Genkit Initialization for PDF Tests

```go
func TestPDFVision(t *testing.T) {
    modelConfig := &config.ModelConfig{
        OpenAIAPIKey: apiKey,
    }

    logger := slog.New(slog.NewTextHandler(os.Stdout, nil))
    g, err := xgenkit.NewGenkit(ctx, modelConfig, logger, false)
    require.NoError(t, err)
}
```

### Vision Test Configuration

```go
knowledgeConfig := config.NewKnowledgeConfig()
knowledgeConfig.PDFEmbeddingMethod = "vision"
knowledgeConfig.PDFExtractionMethod = "library" // Faster for testing
```

### Test Assets

- Use real PDF files for comprehensive testing
- Prefer `solanaWhitepaperPDF` embedded asset over simple test PDFs
- Validate both image extraction and embedding generation

## Error Handling

### PDF Processing Errors

```go
if len(knowledge.Documents) == 0 {
    return nil, errors.Errorf("no pages found in PDF for knowledge %s", id)
}
```

### Embedding Validation

```go
if len(embeddings) != len(knowledge.Documents) {
    return nil, errors.Errorf("embedding count mismatch: got %d, expected %d", len(embeddings), len(knowledge.Documents))
}
```

## Performance Considerations

- **Parallel Processing**: Process multiple pages concurrently when possible
- **Memory Management**: Use streaming for large PDFs
- **API Rate Limits**: Batch image embeddings efficiently
- **Caching**: Cache processed images when processing multiple times

## Multimodal Search Support

Enable text-to-image search by ensuring:

1. Text embeddings use `EmbeddingTaskTypeQuery`
2. Vision embeddings use same embedding space (768 dimensions)
3. Similarity search works across modalities
